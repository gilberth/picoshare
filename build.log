DEPRECATED: The legacy builder is deprecated and will be removed in a future release.
            Install the buildx component to build images with BuildKit:
            https://docs.docker.com/go/buildx/

Sending build context to Docker daemon  77.12MB
Step 1/35 : FROM golang:1.24.0 AS builder
 ---> 245780beb82f
Step 2/35 : ARG TARGETPLATFORM
 ---> Using cache
 ---> 13b0d7468682
Step 3/35 : ARG PS_VERSION
 ---> Using cache
 ---> a4f61f1b58ea
Step 4/35 : COPY ./build /app/build
 ---> Using cache
 ---> 936bc5657dc1
Step 5/35 : COPY ./cmd /app/cmd
 ---> Using cache
 ---> df12db6fd89d
Step 6/35 : COPY ./dev-scripts /app/dev-scripts
 ---> Using cache
 ---> bcfb3568a95e
Step 7/35 : COPY ./garbagecollect /app/garbagecollect
 ---> Using cache
 ---> 5d97f773d635
Step 8/35 : COPY ./handlers /app/handlers
 ---> 857e30d568ab
Step 9/35 : COPY ./picoshare /app/picoshare
 ---> 1ca3294a1927
Step 10/35 : COPY ./random /app/random
 ---> 39fa88380d50
Step 11/35 : COPY ./space /app/space
 ---> 552ae6910f16
Step 12/35 : COPY ./store /app/store
 ---> 221d3733c89b
Step 13/35 : COPY ./go.* /app/
 ---> 3e42aa5d6b79
Step 14/35 : WORKDIR /app
 ---> Running in 75ee0fc696d4
 ---> Removed intermediate container 75ee0fc696d4
 ---> 27d7108829dc
Step 15/35 : RUN TARGETPLATFORM="${TARGETPLATFORM}"     PS_VERSION="${PS_VERSION}"     ./dev-scripts/build-backend "prod"
 ---> Running in 3186f52f2180
[91m+ [[ -z prod ]]
+ MODE=prod
+ PLATFORM=linux/amd64
+ set -u
+ GO_BUILD_TAGS=()
+ BINARY=./bin/picoshare
+ GO_BUILD_TAGS+=('netgo')
+ GO_BUILD_TAGS+=('sqlite_omit_load_extension')
[0m[91m+ [[ prod != \p\r\o\d ]]
+ readonly BINARY
+ readonly GO_BUILD_TAGS
+ readonly GOOS=linux
+ GOOS=linux
+ export GOOS
[0m[91m+ '[' linux/amd64 = linux/amd64 ']'
+ GOARCH=amd64
+ readonly GOARCH
+ export GOARCH
+ BUILD_TAGS_JOINED=
[0m[91m+ for tag in "${GO_BUILD_TAGS[@]}"
+ BUILD_TAGS_JOINED+=' netgo'
+ for tag in "${GO_BUILD_TAGS[@]}"
+ BUILD_TAGS_JOINED+=' sqlite_omit_load_extension'
[0m[91m+ BUILD_TAGS_JOINED='netgo sqlite_omit_load_extension'
+ readonly BUILD_TAGS_JOINED
+ export CGO_ENABLED=1
+ CGO_ENABLED=1
[0m[91m++ date +%s
[0m[91m+ go build -tags 'netgo sqlite_omit_load_extension' -ldflags '-w -extldflags '\''-static'\'' -X '\''github.com/mtlynch/picoshare/v2/build.Version='\'' -X '\''github.com/mtlynch/picoshare/v2/build.unixTime=1753413215'\''' -o ./bin/picoshare cmd/picoshare/main.go
[0m[91mgo: downloading github.com/mtlynch/gorilla-handlers v1.5.2
[0m[91mgo: downloading github.com/gorilla/mux v1.8.0
[0m[91mgo: downloading github.com/mileusna/useragent v1.3.3
[0m[91mgo: downloading github.com/mattn/go-sqlite3 v1.14.22
[0m[91mgo: downloading golang.org/x/crypto v0.0.0-20220331220935-ae2d96664a29
[0m[91mgo: downloading golang.org/x/sys v0.0.0-20210615035016-665e8c7367d1
[0m[91mgo: downloading github.com/felixge/httpsnoop v1.0.1
[0m ---> Removed intermediate container 3186f52f2180
 ---> d36f55827cda
Step 16/35 : FROM scratch AS artifact
 ---> 
Step 17/35 : COPY --from=builder /app/bin/picoshare ./
 ---> ad2368a00870
Step 18/35 : FROM debian:stable-20240311-slim AS litestream_downloader
 ---> 7d59f4f10250
Step 19/35 : ARG TARGETPLATFORM
 ---> Using cache
 ---> d7e943d7f33c
Step 20/35 : ARG litestream_version="v0.3.13"
 ---> Using cache
 ---> 9c94d1f643cd
Step 21/35 : WORKDIR /litestream
 ---> Using cache
 ---> 1111622eb6e3
Step 22/35 : RUN set -x &&     apt-get update &&     DEBIAN_FRONTEND=noninteractive apt-get install -y       ca-certificates       wget
 ---> Using cache
 ---> 3a82c14e42ad
Step 23/35 : RUN set -x &&     if [ "$TARGETPLATFORM" = "linux/arm/v7" ]; then       ARCH="arm7" ;     elif [ "$TARGETPLATFORM" = "linux/arm64" ]; then       ARCH="arm64" ;     else       ARCH="amd64" ;     fi &&     set -u &&     litestream_binary_tgz_filename="litestream-${litestream_version}-linux-${ARCH}.tar.gz" &&     wget "https://github.com/benbjohnson/litestream/releases/download/${litestream_version}/${litestream_binary_tgz_filename}" &&     mv "${litestream_binary_tgz_filename}" litestream.tgz
 ---> Using cache
 ---> b1a570d7c0e0
Step 24/35 : RUN tar -xvzf litestream.tgz
 ---> Using cache
 ---> 42648fe951e7
Step 25/35 : FROM alpine:3.15
 ---> 32b91e3161c8
Step 26/35 : RUN apk add --no-cache bash
 ---> Using cache
 ---> 8264b32dcdb0
Step 27/35 : COPY --from=builder /app/bin/picoshare /app/picoshare
 ---> 31d13cbb13dd
Step 28/35 : COPY --from=litestream_downloader /litestream/litestream /app/litestream
 ---> d08ec6d59b30
Step 29/35 : COPY ./docker-entrypoint /app/docker-entrypoint
 ---> d07bbc7844c5
Step 30/35 : COPY ./litestream.yml /etc/litestream.yml
 ---> dcd37f94b5fe
Step 31/35 : COPY ./LICENSE /app/LICENSE
 ---> aab9376c8eb0
Step 32/35 : ENV LITESTREAM_RETENTION=72h
 ---> Running in 0ed66871bbe1
 ---> Removed intermediate container 0ed66871bbe1
 ---> 05cdbc514586
Step 33/35 : WORKDIR /app
 ---> Running in c258f8277bb1
 ---> Removed intermediate container c258f8277bb1
 ---> d7b4a7414dfc
Step 34/35 : ENTRYPOINT ["/app/docker-entrypoint"]
 ---> Running in 384f880f70ac
 ---> Removed intermediate container 384f880f70ac
 ---> 8b290ce99bdc
Step 35/35 : CMD ["-db", "/data/store.db"]
 ---> Running in 6bdca67eea3f
 ---> Removed intermediate container 6bdca67eea3f
 ---> d46f41055d94
Successfully built d46f41055d94
Successfully tagged picoshare:latest
